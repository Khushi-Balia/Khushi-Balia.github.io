<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://khushi-balia.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://khushi-balia.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-10-22T17:28:32+00:00</updated><id>https://khushi-balia.github.io/feed.xml</id><title type="html">blank</title><subtitle></subtitle><entry><title type="html">Writing Tablegen files for PRU target</title><link href="https://khushi-balia.github.io/blog/2023/week-4/" rel="alternate" type="text/html" title="Writing Tablegen files for PRU target" /><published>2023-06-30T19:53:00+00:00</published><updated>2023-06-30T19:53:00+00:00</updated><id>https://khushi-balia.github.io/blog/2023/week-4</id><content type="html" xml:base="https://khushi-balia.github.io/blog/2023/week-4/"><![CDATA[<p>The LLVM project provides a powerful infrastructure for compiler development, enabling the creation of efficient and optimized code for various target architectures. To harness the full potential of LLVM, developers often need to provide accurate and detailed information about the target hardware. Two essential components in this process are the TableGen files for Register Info and Instruction Info.</p>

<p><code class="language-plaintext highlighter-rouge">TableGen</code> is necessary for writing the abstract target description. This tool translates a target description file (.td) into C++ code that is used in code generation. Its main goal is to reduce large, tedious descriptions into smaller and flexible definitions that are easier to manage and structure.
 The idea is that TableGen is a maintainable and human-readable description which is translated into C++ by the tablegen tool and compiled, along with the hand-coded C++ files from your backend, when building LLVM.</p>

<p>In this blog post, we will explore the process of writing a TableGen file for PRU’s Register Info</p>

<h5 id="understanding-register-info">Understanding Register Info:</h5>

<p>Register Info files in LLVM provide crucial information about the target hardware’s register set. This includes the number of registers, their names, allocation order, register classes, and more. By accurately defining the register information, LLVM can generate optimized machine code specific to the target architecture.</p>

<p>Register fields in the PRU AM335x architecture:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">REG, REG1, REG2, ... (8 to 32 bits)</code>:
The PRU AM335x architecture supports multiple general-purpose registers, denoted as REG, REG1, REG2, and so on. These registers can hold values ranging from 8 to 32 bits. They are commonly used for general-purpose calculations and data manipulation. Examples of such registers include r0, r1, r2, etc.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Rn, Rn1, Rn2, ... (32-bit register fields)</code>:
The PRU AM335x architecture provides a set of 32-bit registers, denoted as Rn, Rn1, Rn2, and so forth. These registers span from r0 to r31, offering a wider range of storage for larger data types or calculations.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Rn.bx (byte field)</code>:
The PRU AM335x architecture includes byte fields specified as Rn.bx. These byte fields allow for the selection of a specific byte within a register. The ‘x’ in Rn.bx can take values from 0 to 3, representing the four available bytes in the register. Examples include r0.b0 (byte 0 of register r0) or r0.b3 (byte 3 of register r0).</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Rn.wx (two-byte field - word)</code>:
To handle two-byte (word) fields, the PRU AM335x architecture introduces Rn.wx notation. The ‘x’ in Rn.wx can take values from 0 to 2, representing the three possible word spans. A word spans two bytes, and each value of ‘x’ denotes the starting byte of the word. Examples include r0.w0 (word spanning bytes 0 and 1), r0.w1 (word spanning bytes 1 and 2), and so on.</p>
  </li>
</ul>

<h5 id="pru-register-info-tablegen-file">PRU Register Info tablegen file</h5>

<p>At the top of the file we find the following class:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">class</span> <span class="nc">PRUReg</span><span class="o">&lt;</span><span class="n">bits</span><span class="o">&lt;</span><span class="mi">16</span><span class="o">&gt;</span> <span class="n">num</span><span class="p">,</span> <span class="n">string</span> <span class="n">name</span><span class="p">,</span> <span class="n">list</span><span class="o">&lt;</span><span class="n">Register</span><span class="o">&gt;</span> <span class="n">subregs</span> <span class="o">=</span> <span class="p">[],</span> <span class="n">list</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">altNames</span> <span class="o">=</span> <span class="p">[]</span><span class="o">&gt;</span> <span class="o">:</span> <span class="n">RegisterWithSubRegs</span><span class="o">&lt;</span><span class="n">name</span><span class="p">,</span> <span class="n">subregs</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="n">field</span> <span class="n">bits</span><span class="o">&lt;</span><span class="mi">16</span><span class="o">&gt;</span> <span class="n">Num</span> <span class="o">=</span> <span class="n">num</span><span class="p">;</span>
 
  <span class="n">let</span> <span class="n">HWEncoding</span> <span class="o">=</span> <span class="n">num</span><span class="p">;</span>
  <span class="n">let</span> <span class="n">Namespace</span> <span class="o">=</span> <span class="s">"PRU"</span><span class="p">;</span>
  <span class="n">let</span> <span class="n">SubRegs</span> <span class="o">=</span> <span class="n">subregs</span><span class="p">;</span>
  <span class="n">let</span> <span class="n">AltNames</span> <span class="o">=</span> <span class="n">altNames</span><span class="p">;</span>
<span class="p">}</span>  

</code></pre></div></div>

<p>That code declares a class PRUReg that inherits from the internalized Register class which is defined in include/llvm/Target/Target.td. The code is also telling us that we must provide up to four arguments when inheriting from this class, the last 2 are optional.</p>

<p>Moving on, we find the following register definitions in the file. Each line of code is a TableGen record that defines a single register.</p>

<p>Since we know, the registers can be byte field, two-byte field(word), 32-bit register, we need to define all of these.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1">//// 8 bit subregs</span>
 <span class="n">def</span> <span class="n">r0_b0</span> <span class="o">:</span> <span class="n">PRUReg</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">,</span> <span class="s">"r0.b0"</span><span class="o">&gt;</span><span class="p">;</span>
 <span class="n">def</span> <span class="n">r0_b1</span> <span class="o">:</span> <span class="n">PRUReg</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">,</span> <span class="s">"r0.b1"</span><span class="o">&gt;</span><span class="p">;</span>
 <span class="n">def</span> <span class="n">r0_b2</span> <span class="o">:</span> <span class="n">PRUReg</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">,</span> <span class="s">"r0.b2"</span><span class="o">&gt;</span><span class="p">;</span>
 <span class="n">def</span> <span class="n">r0_b3</span> <span class="o">:</span> <span class="n">PRUReg</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">,</span> <span class="s">"r0.b3"</span><span class="o">&gt;</span><span class="p">;</span>
 <span class="n">def</span> <span class="n">r1_b0</span> <span class="o">:</span> <span class="n">PRUReg</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">,</span> <span class="s">"r1.b0"</span><span class="o">&gt;</span><span class="p">;</span>
 <span class="n">def</span> <span class="n">r1_b1</span> <span class="o">:</span> <span class="n">PRUReg</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">,</span> <span class="s">"r1.b1"</span><span class="o">&gt;</span><span class="p">;</span>
 <span class="n">def</span> <span class="n">r1_b2</span> <span class="o">:</span> <span class="n">PRUReg</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">,</span> <span class="s">"r1.b2"</span><span class="o">&gt;</span><span class="p">;</span>
 <span class="n">def</span> <span class="n">r1_b3</span> <span class="o">:</span> <span class="n">PRUReg</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">,</span> <span class="s">"r1.b3"</span><span class="o">&gt;</span><span class="p">;</span>
 <span class="p">.....</span>

 <span class="c1">//// 16 bit subregs</span>
 <span class="n">def</span> <span class="n">r0_w0</span> <span class="o">:</span> <span class="n">PRUReg</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">,</span> <span class="s">"r0.w0"</span><span class="p">,</span> <span class="p">[</span><span class="n">r0_b0</span><span class="p">,</span> <span class="n">r0_b1</span><span class="p">]</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">DwarfRegNum</span><span class="o">&lt;</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">;</span>
 <span class="n">def</span> <span class="n">r0_w2</span> <span class="o">:</span> <span class="n">PRUReg</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">,</span> <span class="s">"r0.w2"</span><span class="p">,</span> <span class="p">[</span><span class="n">r0_b2</span><span class="p">,</span> <span class="n">r0_b3</span><span class="p">]</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">DwarfRegNum</span><span class="o">&lt;</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">;</span>
 <span class="n">def</span> <span class="n">r0_w1</span> <span class="o">:</span> <span class="n">PRUReg</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">,</span> <span class="s">"r0.w1"</span><span class="p">,</span> <span class="p">[</span><span class="n">r0_b1</span><span class="p">,</span> <span class="n">r0_b2</span><span class="p">]</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">DwarfRegNum</span><span class="o">&lt;</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">;</span>
 <span class="n">def</span> <span class="n">r1_w0</span> <span class="o">:</span> <span class="n">PRUReg</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">,</span> <span class="s">"r1.w0"</span><span class="p">,</span> <span class="p">[</span><span class="n">r1_b0</span><span class="p">,</span> <span class="n">r1_b1</span><span class="p">]</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">DwarfRegNum</span><span class="o">&lt;</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">;</span>
 <span class="n">def</span> <span class="n">r1_w2</span> <span class="o">:</span> <span class="n">PRUReg</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">,</span> <span class="s">"r1.w2"</span><span class="p">,</span> <span class="p">[</span><span class="n">r1_b2</span><span class="p">,</span> <span class="n">r1_b3</span><span class="p">]</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">DwarfRegNum</span><span class="o">&lt;</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">;</span>
 <span class="n">def</span> <span class="n">r1_w1</span> <span class="o">:</span> <span class="n">PRUReg</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">,</span> <span class="s">"r1.w1"</span><span class="p">,</span> <span class="p">[</span><span class="n">r1_b1</span><span class="p">,</span> <span class="n">r1_b2</span><span class="p">]</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">DwarfRegNum</span><span class="o">&lt;</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="p">.....</span>

 <span class="c1">//// 32 bit main regs</span>
 <span class="n">def</span> <span class="n">r0</span> <span class="o">:</span> <span class="n">PRUReg</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">,</span> <span class="s">"r0"</span><span class="p">,</span> <span class="p">[</span><span class="n">r0_w0</span><span class="p">,</span> <span class="n">r0_w2</span><span class="p">]</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">DwarfRegNum</span><span class="o">&lt;</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&gt;</span><span class="p">;</span>
 <span class="n">def</span> <span class="n">r1</span> <span class="o">:</span> <span class="n">PRUReg</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">,</span> <span class="s">"r1"</span><span class="p">,</span> <span class="p">[</span><span class="n">r1_w0</span><span class="p">,</span> <span class="n">r1_w2</span><span class="p">]</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">DwarfRegNum</span><span class="o">&lt;</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">&gt;</span><span class="p">;</span>
 <span class="n">def</span> <span class="n">r2</span> <span class="o">:</span> <span class="n">PRUReg</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">,</span> <span class="s">"r2"</span><span class="p">,</span> <span class="p">[</span><span class="n">r2_w0</span><span class="p">,</span> <span class="n">r2_w2</span><span class="p">]</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">DwarfRegNum</span><span class="o">&lt;</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">&gt;</span><span class="p">;</span>
 <span class="n">def</span> <span class="n">r3</span> <span class="o">:</span> <span class="n">PRUReg</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">,</span> <span class="s">"r3"</span><span class="p">,</span> <span class="p">[</span><span class="n">r2_w0</span><span class="p">,</span> <span class="n">r3_w2</span><span class="p">]</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">DwarfRegNum</span><span class="o">&lt;</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">&gt;</span><span class="p">;</span>
 <span class="n">def</span> <span class="n">r4</span> <span class="o">:</span> <span class="n">PRUReg</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">,</span> <span class="s">"r4"</span><span class="p">,</span> <span class="p">[</span><span class="n">r4_w0</span><span class="p">,</span> <span class="n">r4_w2</span><span class="p">]</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">DwarfRegNum</span><span class="o">&lt;</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">&gt;</span><span class="p">;</span>
 <span class="n">def</span> <span class="n">r5</span> <span class="o">:</span> <span class="n">PRUReg</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">,</span> <span class="s">"r5"</span><span class="p">,</span> <span class="p">[</span><span class="n">r5_w0</span><span class="p">,</span> <span class="n">r5_w2</span><span class="p">]</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">DwarfRegNum</span><span class="o">&lt;</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">&gt;</span><span class="p">;</span>

</code></pre></div></div>

<p>The records inherit from two classes: PRUReg (that we already discussed) and DwarfRegNum. DwarfRegNum is yet another internalized class defined used to provide debug information for GCC and GDB.</p>

<p>The last few lines in the file define the Register Classes.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">def</span> <span class="n">breg</span> <span class="o">:</span> <span class="n">RegisterClass</span><span class="o">&lt;</span><span class="s">"PRU"</span><span class="p">,</span> <span class="p">[</span><span class="n">i8</span><span class="p">],</span> <span class="mi">8</span><span class="p">,</span> <span class="p">(</span><span class="n">sequence</span> <span class="s">"b%u"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span><span class="o">&gt;</span><span class="p">;</span>

 <span class="n">def</span> <span class="n">reg8</span> <span class="o">:</span> <span class="n">RegisterClass</span><span class="o">&lt;</span><span class="s">"PRU"</span><span class="p">,</span> <span class="p">[</span><span class="n">i8</span><span class="p">],</span> <span class="mi">8</span><span class="p">,</span> <span class="p">(</span><span class="n">add</span>
    <span class="p">(</span><span class="n">sequence</span> <span class="s">"r%u_b0"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">31</span><span class="p">),</span>
    <span class="p">(</span><span class="n">sequence</span> <span class="s">"r%u_b1"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">31</span><span class="p">),</span>
    <span class="p">(</span><span class="n">sequence</span> <span class="s">"r%u_b2"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">31</span><span class="p">),</span>
    <span class="p">(</span><span class="n">sequence</span> <span class="s">"r%u_b3"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">31</span><span class="p">)</span>
 <span class="p">)</span><span class="o">&gt;</span><span class="p">;</span>

 <span class="n">def</span> <span class="n">reg16</span> <span class="o">:</span> <span class="n">RegisterClass</span><span class="o">&lt;</span><span class="s">"PRU"</span><span class="p">,</span> <span class="p">[</span><span class="n">i16</span><span class="p">],</span> <span class="mi">8</span><span class="p">,</span> <span class="p">(</span><span class="n">add</span>
    <span class="p">(</span><span class="n">sequence</span> <span class="s">"r%u_w0"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">31</span><span class="p">),</span>
    <span class="p">(</span><span class="n">sequence</span> <span class="s">"r%u_w1"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">31</span><span class="p">),</span>
    <span class="p">(</span><span class="n">sequence</span> <span class="s">"r%u_w2"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">31</span><span class="p">)</span>
 <span class="p">)</span><span class="o">&gt;</span><span class="p">;</span>

 <span class="n">def</span> <span class="n">reg32</span> <span class="o">:</span> <span class="n">RegisterClass</span><span class="o">&lt;</span><span class="s">"PRU"</span><span class="p">,</span> <span class="p">[</span><span class="n">i32</span><span class="p">],</span> <span class="mi">8</span><span class="p">,</span> <span class="p">(</span><span class="n">sequence</span> <span class="s">"r%u"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">31</span><span class="p">)</span><span class="o">&gt;</span><span class="p">;</span>

</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[Week 3-4]]></summary></entry><entry><title type="html">Implementing the Cpu0 Backend</title><link href="https://khushi-balia.github.io/blog/2023/week-2/" rel="alternate" type="text/html" title="Implementing the Cpu0 Backend" /><published>2023-06-14T19:53:00+00:00</published><updated>2023-06-14T19:53:00+00:00</updated><id>https://khushi-balia.github.io/blog/2023/week-2</id><content type="html" xml:base="https://khushi-balia.github.io/blog/2023/week-2/"><![CDATA[<p>LLVM is a widely used open-source compiler infrastructure that provides a set of modular and reusable compiler and toolchain technologies. One of the key strengths of LLVM is its extensibility, allowing developers to add support for new architectures by building backend targets. In this blog, we will walk you through the process of building the Cpu0 backend in LLVM, enabling you to generate code for the Cpu0 architecture. Let’s get started!</p>

<h5 id="the-cpu0-backend">The Cpu0 Backend</h5>

<p>Cpu0 is a 32-bit architecture. This is the reference of the Cpu0 backend in LLVM
<a href="https://jonathan2251.github.io/lbd/llvmstructure.html">Tutorial: Creating an LLVM Backend for the Cpu0 Architecture</a></p>

<blockquote class="block-warning">
  <h5 id="warning">WARNING</h5>

  <p>This tutorial was based on LLVM version 3.1. It does not have support for the recent versions of LLVM.</p>
</blockquote>

<p>For this reason, I decided to use the LLVM version 8.0 after making a few changes in the codebase.
This <a href="https://github.com/P2Tree/LLVM_for_cpu0">repository</a> has the code which supports the LLVM version 8.0</p>

<h5 id="building-the-backend">Building the backend</h5>

<ol>
  <li>
    <p>Build the <a href="https://github.com/llvm/llvm-project">LLVM version 8.0</a></p>
  </li>
  <li>
    <p>Clone <a href="https://github.com/P2Tree/LLVM_for_cpu0">this</a> repository.</p>
  </li>
  <li>
    <p>Run the following commands:</p>

    <div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">cmake</span> <span class="nt">-G</span> <span class="s2">"Unix Makefiles"</span> <span class="nt">-DCMAKE_BUILD_TYPE</span><span class="o">=</span><span class="nt">Debug</span> <span class="nc">..</span><span class="o">/</span><span class="nt">llvm</span>
<span class="nt">ninja</span>
</code></pre></div>    </div>
    <p>or just to build the Cpu0 target, run</p>

    <div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">cmake</span> <span class="nt">-G</span> <span class="s2">"Unix Makefiles"</span> <span class="nt">-DCMAKE_BUILD_TYPE</span><span class="o">=</span><span class="nt">Debug</span> <span class="nt">-DLLVM_TARGETS_TO_BUILD</span><span class="o">=</span><span class="nt">Cpu0</span> <span class="nc">..</span><span class="o">/</span><span class="nt">llvm</span>
<span class="nt">ninja</span>
</code></pre></div>    </div>
  </li>
  <li>Then run
    <div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">cmake</span> <span class="nt">-DCMAKE_CXX_COMPILER</span><span class="o">=</span><span class="nt">clang</span><span class="o">++</span> <span class="nt">-DCMAKE_C_COMPILER</span><span class="o">=</span><span class="nt">clang</span> <span class="nt">-DCMAKE_BUILD_TYPE</span><span class="o">=</span><span class="nt">Debug</span> <span class="nt">-G</span> <span class="s2">"Ninja"</span> <span class="nc">..</span><span class="o">/</span><span class="nt">llvm</span>
<span class="nt">ninja</span>
</code></pre></div>    </div>
  </li>
  <li>Followed by
    <div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">build</span><span class="o">/</span><span class="nt">bin</span><span class="o">/</span><span class="nt">llc</span> <span class="nt">--version</span>
</code></pre></div>    </div>

    <blockquote class="block-tip">
      <h5 id="tip">TIP</h5>

      <p>Remember to invoke the llc that we just built, not the system llc.
You can check which llc is being used by running <code class="language-plaintext highlighter-rouge">which llc</code>.
Source the built compiler path</p>
    </blockquote>
  </li>
  <li>Run these commands
    <div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="na">export</span><span class="err"> </span><span class="na">PATH</span><span class="err">=&lt;</span><span class="na">path</span><span class="err">&gt;</span><span class="p">:</span><span class="nv">$PATH</span> 
  <span class="n">export</span> <span class="n">LIBRARY_PATH</span><span class="o">=&lt;</span><span class="n">path</span><span class="o">&gt;:</span><span class="nv">$LIBRARY_PATH</span>
  <span class="n">export</span> <span class="n">LD_LIBRARY_PATH</span><span class="o">=&lt;</span><span class="n">path</span><span class="o">&gt;:</span><span class="nv">$LD_LIBRARY_PATH</span>
</code></pre></div>    </div>
  </li>
  <li>Try running some test cases/examples
    <div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">build</span><span class="o">/</span><span class="nt">bin</span><span class="o">/</span><span class="nt">clang</span> <span class="nt">-target</span> <span class="nt">x86_64-unknown-linux-gnu</span> <span class="nt">-c</span> <span class="nt">example</span><span class="nc">.c</span> <span class="nt">-S</span> <span class="nt">-emit-llvm</span> <span class="nt">-o</span> <span class="nt">example</span><span class="nc">.ll</span>
<span class="nt">build</span><span class="o">/</span><span class="nt">bin</span><span class="o">/</span><span class="nt">llc</span> <span class="nt">-march</span><span class="o">=</span><span class="nt">cpu0</span> <span class="nt">-mcpu</span><span class="o">=</span><span class="nt">cpu032I</span> <span class="nt">-relocation-model</span><span class="o">=</span><span class="nt">pic</span> <span class="nt">-filetype</span><span class="o">=</span><span class="nt">asm</span> <span class="nt">example</span><span class="nc">.ll</span> <span class="nt">-o</span> <span class="nt">-</span>
</code></pre></div>    </div>
  </li>
</ol>

<h5 id="my-week-2-progress">My Week 2 progress</h5>

<p>During the second week while building the Cpu0 backend in LLVM, I encountered some challenges related to the compatibility of LLVM versions. Here’s a breakdown of my progress and the solutions I found:</p>

<ul>
  <li>
    <p>Attempt: LLVM Version 12
In the beginning, I attempted to build the Cpu0 backend using LLVM version 12. However, I discovered that the Cpu0 backend was not supported in this version. Despite my efforts to modify the LLVM source code, it became clear that the necessary components for the Cpu0 backend were not present.</p>

    <p>Solution 1:
Realizing that version 12 did not support the Cpu0 backend, I decided to explore earlier versions of LLVM to find the desired compatibility.</p>
  </li>
  <li>
    <p>Attempt 2: LLVM Version 10
Next, I tried building the Cpu0 backend using LLVM version 10. Unfortunately, I encountered the same issue as with version 12.</p>

    <p>Solution 2:
Undeterred, I turned to the open-source community to find a solution. After some research, I came across a <a href="https://github.com/P2Tree/LLVM_for_cpu0">repository</a> that contained an unofficial version of the Cpu0 backend for LLVM 8.</p>
  </li>
  <li>
    <p>Attempt 3: LLVM Version 8
Using the GitHub repository as a reference, I started building the Cpu0 backend in LLVM version 8. This involved downloading the LLVM 8 source code and incorporating the necessary files from the repository.</p>

    <p>Solution 3:
By following the instructions provided in the GitHub repository, I successfully built the Cpu0 backend in LLVM version 8.</p>
  </li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[Week 2]]></summary></entry><entry><title type="html">Flashing the Beaglebone black and learning about the pru assembly</title><link href="https://khushi-balia.github.io/blog/2023/week-1/" rel="alternate" type="text/html" title="Flashing the Beaglebone black and learning about the pru assembly" /><published>2023-06-05T19:53:00+00:00</published><updated>2023-06-05T19:53:00+00:00</updated><id>https://khushi-balia.github.io/blog/2023/week-1</id><content type="html" xml:base="https://khushi-balia.github.io/blog/2023/week-1/"><![CDATA[<p>The BeagleBone Black is a versatile single-board computer that opens up a world of possibilities for development projects. In this blog, I will guide you through the process of setting up the BeagleBone Black for development purposes and share my progress from the first week of exploration. Let’s dive in!</p>

<h5 id="setting-up-the-beaglebone-black">Setting Up the BeagleBone Black</h5>

<ol>
  <li>Download the non-flasher recommended debian image from the <a href="https://beagleboard.org/latest-images">beagleboard website</a>.</li>
</ol>

<blockquote class="block-warning">
  <h5 id="warning">WARNING</h5>

  <p>Do not use a “Flasher” image, which can be identified by sequential blinkning of the leds generally.</p>
</blockquote>

<ol>
  <li>
    <p>Flash the Debian image to the microSD card using image writing software <a href="https://etcher.balena.io/">Balena Etcher</a></p>
  </li>
  <li>
    <p>Insert the microSD card into the BeagleBone Black’s card slot. Connect the power supply to the board and wait for it to boot up.</p>
  </li>
  <li>
    <p>The board will power down once the flashing is over.</p>
  </li>
</ol>

<h5 id="setting-up-the-network">Setting up the network</h5>

<ol>
  <li>
    <p>Connect the Board to your host using USB</p>
  </li>
  <li>
    <p>Access the BeagleBone Black by opening a terminal or command prompt and establish an SSH connection to the BeagleBone Black using this <a href="https://gist.github.com/pdp7/d2711b5ff1fbb000240bd8337b859412">script</a></p>
  </li>
  <li>
    <p>The default password is: temppwd</p>
  </li>
</ol>

<h5 id="my-week-1-progress">My Week 1 progress</h5>

<p>During the first week of exploration with the BeagleBone Black, I focused on familiarizing myself with the board and implementing basic examples.</p>

<ul>
  <li>Basic PRU Examples.</li>
</ul>

<p>I flashed some basic examples from the <a href="https://beagleboard.org/static/prucookbook/">PRU Cookbook</a> onto the PRU cores.</p>

<ul>
  <li><a href="https://github.com/dinuxbg/pru-gcc-examples">LED Blinking</a> using PRU-GCC</li>
</ul>

<p>Its the “hello world” example of the embedded world. Both PRU cores of a Beaglebone Black are started to toggle GPIOs. PRU0 core is programmed in C, while the firmware for PRU1 core is written in assembler.</p>

<ul>
  <li>Learning PRU Assembly</li>
</ul>

<p>I dedicated time to learn about PRU assembly, which involved understanding the syntax, instructions, and registers.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Week 1]]></summary></entry><entry><title type="html">Weekly meets and targets</title><link href="https://khushi-balia.github.io/blog/2023/mom-target/" rel="alternate" type="text/html" title="Weekly meets and targets" /><published>2023-06-01T19:53:00+00:00</published><updated>2023-06-01T19:53:00+00:00</updated><id>https://khushi-balia.github.io/blog/2023/mom-target</id><content type="html" xml:base="https://khushi-balia.github.io/blog/2023/mom-target/"><![CDATA[<p>This blog will be updates Bi-weekly.</p>

<h4 id="week-1-and-2">WEEK 1 and 2</h4>

<h5 id="mom---27th-may-2023">MOM - 27th May, 2023</h5>

<ul>
  <li>
    <p>Discussed the scope and implementation of the project</p>
  </li>
  <li>Set targets for Week 1
    <ol>
      <li>Go through the PRU Assembly, compile some examples using pru-gcc</li>
      <li>Refer the Cpu0 backend, going through the codebase and implementation</li>
      <li>Read the PRU section of the reference manual, and understand more about it</li>
    </ol>
  </li>
  <li>
    <p>Suggestion given : Look for a way to take care of the special functions in the language, like gpio pins configuration, debugging functionality and so on</p>
  </li>
  <li>
    <p>Final goal : Upstreaming the backend</p>
  </li>
  <li>References shared:
<a href="https://mythopoeic.org/BBB-PRU/am335xPruReferenceGuide.pdf">https://mythopoeic.org/BBB-PRU/am335xPruReferenceGuide.pdf</a>
<a href="https://www.ti.com/lit/ug/spruh73q/spruh73q.pdf">https://www.ti.com/lit/ug/spruh73q/spruh73q.pdf</a></li>
</ul>

<h4 id="week-3-and-4">WEEK 3 and 4</h4>

<h5 id="mom---10th-june-2023">MOM - 10th June, 2023</h5>

<ul>
  <li>
    <p>Discussed some PRU instructions and registers</p>
  </li>
  <li>Set target for Week 2
    <ol>
      <li>Modify the existing implementation of PRU Backend to support the latest LLVM version 16</li>
      <li>Write the registerinfo.td for PRU</li>
      <li>Write the instrinfo.td for PRU</li>
    </ol>
  </li>
  <li>References shared:
<a href="https://llvm.org/docs/TableGen/ProgRef.html">https://llvm.org/docs/TableGen/ProgRef.html</a>
<a href="https://www.ti.com/lit/SPRUIJ2">https://www.ti.com/lit/SPRUIJ2</a>
<a href="https://mythopoeic.org/BBB-PRU/am335xPruReferenceGuide.pdf">https://mythopoeic.org/BBB-PRU/am335xPruReferenceGuide.pdf</a>
<a href="https://gcc.gnu.org/legacy-ml/gcc-patches/2018-06/msg00775.html">https://gcc.gnu.org/legacy-ml/gcc-patches/2018-06/msg00775.html</a>
<a href="https://github.com/bryant/llvm-pru">https://github.com/bryant/llvm-pru</a></li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[Bi-weekly meets]]></summary></entry></feed>